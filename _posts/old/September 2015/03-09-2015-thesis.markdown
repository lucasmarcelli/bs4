---
layout: old-post
title: "Thesis! Ahh!"
subtitle: "Let's get started."
---

*Small note, I stopped my graduate program since writing this :(*

I started my Graduate Thesis!

It's pretty neat, and I feel like documenting it so here it goes.

My thesis is a mix of Compsci and Medicine. I never took any biology, but thats what happens when your supervisor is a biomedical researcher I guess.

Ever noticed someone with bulging eyes? Thats usually caused by [Hyperthyroidism](https://en.wikipedia.org/wiki/Hyperthyroidism) of some form. In order to treat the underlying cause, it's neccesary to see how far out the eyes bulge over time. Currently the way to do this is with this:

<br>

<p class="img-text">
	<img src="/assets/img/posts/old/img/2015Sept/exo.gif" title="Say it 5 times fast">
	Exophthalmometer 
</p>

The doctor places that on your eyes, under the skin on the edges and uses the mirrors to estimate how high your eye is from the fixed base of your skull bone. They do measurements over several weeks to see how quickly the eyes are bulging out. 

This is not a comfortable procedure or an accurate one. There has to be a better way!

<p class="img-text">
	<img src="/assets/img/posts/old/img/2015Sept/1.png" title="Takes about 10 seconds to scan.">
	 Gasp! A better way! 
</p>

That is a 3d scan of a patients face. His eyes and skull are right there on that mesh. Why dont we start by marking the fixed points?

<p class="img-text">
	<img src="/assets/img/posts/old/img/2015Sept/2.png" title="This was actually hard to implement. I swear.">
	Neat 
</p>

I've already replicated one part of the procedure. Those points will not move as the eyes do because if they do, the patient likely has injuries not compatible with life. 

Now, how did I get those points there? 

See, OpenGL gives you an (X,Y) coordinate on the screen for your mouse pointer, but the point needs to be placed at a depth of some Z. Remember Math 111? How you can project from a point to a plane? Turns out you can do the same in reverse. 

Ugh, implementing that is gonna be so ha-

{% highlight C++ %}	
	gluUnProject( winX, winY, winZ, modelview, projection, viewport, &posX, &posY, &posZ);
{% endhighlight %}


Oh.

Turns out people need to do this pretty often, so it's included in [GLUT](https://en.wikipedia.org/wiki/OpenGL_Utility_Toolkit). 

Once I have the position from that, it's a simple matter of drawing the sphere at (X,Y,Z).

Now what? I can easily get the distance between the two points by taking the magnitude of one minus the other. I somehow need to get the centre and radius of the eye just from the surface. 

Lot's of people will remember from highschool that you [need 3 points to define a circle](https://www.khanacademy.org/math/geometry/triangle-properties/perpendicular_bisectors/v/three-points-defining-a-circle), but many don't know that you can extend this into arbitrary dimensions. With 4 points, you can define a *unqiue* sphere. 

<p class="img-text">
	<img src="/assets/img/posts/old/img/2015Sept/3.png" title="This was actually hard to implement. I swear.">
 	Hey look! 4 points on each eye! 
</p>

Now, eyes are roughly the same size across the *entire* human population. 12 mm radius average with a varaince of only 1mm. This means we can throw out most spheres outright if they are too large or too small to be reasonable!

How do we get the sphere from those 4 points though?

It's a bit of a mission.

Analytically, it's incredibly easy. You can solve the problem with basic algebra knowledge in about 5 minutes with any 4 points. Computationally, it's also easy for the computer to solve, but implementing it requires some thinking.

I took the equations that resulted from solving it analytically and realized that the computer simply had to solve a determinant. After searching the web I stumbled across this:

<p class="img-text">
	<img src="/assets/img/posts/old/img/2015Sept/det.png" title="This was actually hard to implement. I swear.">
</p>

Which looked just like the one I had on paper, but it simplified it by splitting it into cofactors.

<p class="img-text">
	<img src="/assets/img/posts/old/img/2015Sept/simple.png" title="This was actually hard to implement. I swear.">
</p>

All it took from there was implementing a recursive determininant solver, which has been done a million times before. I ended up implementing my own for performance issues though.

And, voilia!

<p class="img-text">
	<img src="/assets/img/posts/old/img/2015Sept/4.png" title="This was actually hard to implement. I swear.">
</p>
<p class="img-text">
	<img src="/assets/img/posts/old/img/2015Sept/5.png" title="This was actually hard to implement. I swear.">
</p>

The centre of those spheres is the rough centre of the eyes. Since eyes aren't truly spherical anyways, the error should be within margin, but I will be improving the position of the sphere later.

The next step is a throwback to Math 111. Those two fixed points have a line between them. To find the distance between the xz plane defined by that line and the centre of each eye, is to find how far the eye is bulging! All I have to do is project the centre point of the spheres onto the plane and the result is the vector between them.

Next time: improvements on the sphere finding algorithim.